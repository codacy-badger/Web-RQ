#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-
from hashlib import md5
from urllib.parse import urlencode
from urllib.request import urlopen
import json


class AuthLogin(object):
    AUTH_LOGIN_API = "3e7c78e35a76a9299309885393b02d97"
    AUTH_LOGIN_FB_SIG = "c1e620fa708a1d5696fb991c1bde5662"
    AUTH_LOGIN_LOCALE = "pt_br"
    AUTH_LOGIN_REST_URL = "https://api.facebook.com/restserver.php?{0}"

    AUTH_LOGIN_DATA = {

        "api_key": AUTH_LOGIN_API,
        "email": "",
        "format": "JSON",
        "locale": AUTH_LOGIN_LOCALE,
        "method": "auth.login",
        "password": "",
        "return_ssl_resources": "0",
        "v": "1.0"
        # "sig": ""
    }

    __DATA = {}

    def __init__(self, email: str, password: str):
        self.AUTH_LOGIN_DATA["email"] = email
        self.AUTH_LOGIN_DATA["password"] = password

        self.__sign_creator()
        url = self.AUTH_LOGIN_REST_URL.format(urlencode(self.AUTH_LOGIN_DATA))

        with urlopen(url) as req:
            self.__DATA = json.loads(req.read())

    def get_session_key(self) -> str:
        key = ""

        if not self.has_error():
            key = self.__DATA["session_key"]

        return key

    def get_user_id(self) -> int:
        id = 0

        if not self.has_error():
            id = self.__DATA["uid"]

        return id

    def get_secret(self) -> str:

        secret = ""

        if not self.has_error():
            secret = self.__DATA["secret"]

        return secret

    def get_access_token(self) -> str:
        token = ""

        if not self.has_error():
            token = self.__DATA["access_token"]

        return token

    def get_machine_id(self) -> str:
        id = ""

        if not self.has_error():
            id = self.__DATA["machine_id"]

        return id

    def is_confirmed(self) -> bool:

        return (not self.has_error()) and ("confirmed" in self.__DATA) and (self.__DATA["confirmed"])

    def get_identifier(self) -> str:

        identifier = ""

        if not self.has_error():
            identifier = self.__DATA["identifier"]

        return identifier

    def has_error(self) -> bool:
        return 'error_msg' in self.__DATA

    def get_error_code(self) -> int:
        error = 0

        if self.has_error():
            error = self.__DATA["error_code"]

        return error

    def get_error_msg(self) -> str:

        msg = ""

        if self.has_error():
            msg = self.__DATA["error_msg"]

        return msg

    def get_error_data(self) -> dict:

        data = {}
        if self.has_error():
            data = self.__DATA["error_data"]

        return data

    def __sign_creator(self):
        sig = ""

        for key, value in self.AUTH_LOGIN_DATA.items():
            sig += "{0}={1}".format(key, value)

        sig += self.AUTH_LOGIN_FB_SIG

        m = md5()
        sig_utf8 = sig.encode("utf-8")
        m.update(sig_utf8)
        self.AUTH_LOGIN_DATA["sig"] = m.hexdigest()


#A = AuthLogin("qrechu4uj@wealthymoney.pw", "bas15as")

#if not A.has_error() and A.is_confirmed():
#    print(A.get_access_token())
