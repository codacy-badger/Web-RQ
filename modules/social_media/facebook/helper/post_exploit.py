#!/usr/bin/env python3.6
# -*- coding: utf-8 -*-
from core.driver_request import DriverRequest
from core.logger import log
from modules.social_media.facebook.actions.login_action import Login
from modules.social_media.facebook.actions.post.initializer import PostInitializer
# from modules.social_media.facebook.actions.post_action import Post
from modules.social_media.facebook.book.post_book import PATTERN_PAGE_POST


class PostExploit(object):
    """
    Helper para obter dados sobre postagens no Facebook.
    """

    # Login text-plain
    __login: str = ''

    # Password text-plain
    __password: str = ''

    # Driver Channel
    __driver: None

    # Posts a serem verificados

    """
    A estrutura do dict deve ser:
        {
            page_id_1: [post_id_1,post_id_2],
            page_id_2: [post_id_1,post_id_2]
        }
    """

    __posts_dict: dict = {}

    __response_dict = {}

    def set_login(self, login):

        """
        Login que sera usado
        :param login: str
        :return: PostExploit
        """

        log('Setado login: {}'.format(login))
        self.__login = login
        return self

    def set_password(self, password):

        """
        Senha que sera usada
        :param password: str
        :return: PostExploit
        """

        log('Setado senha: {}'.format(password))

        self.__password = password

        return self

    def set_posts(self, posts: dict):

        """

        A estrutura do dict deve ser:
        {
            page_id_1: [post_id_1,post_id_2],
            page_id_2: [post_id_1,post_id_2]
        }
        :param posts: dict
        :return: PostExploit

        """

        if len(posts) > 0:

            self.__posts_dict = posts

            for key in posts.keys():
                log('Pagina de ID "{}" setada com {} postagens para serem verificadas.'.format(key, len(posts[key])))

        return self

    def get_login(self) -> str:

        """
        Retorna login
        :return: str
        """

        return self.__login

    def get_password(self) -> str:

        """
        Retorna senha
        :return: str
        """

        return self.__password

    def start(self):

        """

        Funcao para realizar exploit
        :return: PostExploit

        """

        driver_request = DriverRequest()

        log('Requisitando driver')

        self.__driver = driver_request.get_driver()

        log('Acessando Facebook Login.')

        if Login.facebook_login(self.__driver, self.get_login(), self.get_password()):
            self.__exploit_start()

        return self

    def __exploit_start(self):

        """
        Inicializa o exploit
        :return: None
        """

        # Vamos navegar de pagina por pagina

        for page_id in self.__posts_dict.keys():
            self.__response_dict[page_id] = {}
            # E verificar os posts
            for post_id in self.__posts_dict[page_id]:
                # Agora, analizaremos o post
                self.__response_dict[page_id][post_id] = self.__get_posts_data(page_id=page_id, post_id=post_id)

    def get_response(self):
        return self.__response_dict

    def __get_posts_data(self, page_id, post_id):

        """

        Nesta funcao prepararemos o post para pegar os dados
        :param page_id: str
        :param post_id: str
        :return: None

        """

        url = PATTERN_PAGE_POST.format(post_id, page_id)

        self.__driver.get(url)

        PostInitializer().set_web_driver(self.__driver).set_post_id(post_id).set_page_id(page_id).set_login(
            self.__login).set_password(self.__password).start()
        # Post.post_capture(web_driver=self.__driver, post_id=post_id, page_id=page_id)
        return PostInitializer.get_response()

    def __del__(self):
        self.__driver.quit()
